
ADC_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000155  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000892  00000000  00000000  00000175  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000627  00000000  00000000  00000a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001f7  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000ce  000000ce  00000122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    0000004e  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

00000080 <main>:
# define F_CPU 16000000
#include <avr/io.h>
#include <util/delay.h>

static inline void initADC0(void){
	ADMUX |= (1<<REFS0);     //reference voltage on AVCC
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC clock prescaler /128
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	87 60       	ori	r24, 0x07	; 7
  92:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); //enable ADC
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
{
	uint8_t ledValue;
	uint16_t adcValue;
	uint8_t i;
	initADC0();
	DDRD = 0b11111100;
  9a:	8c ef       	ldi	r24, 0xFC	; 252
  9c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD2);
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	8b b9       	out	0x0b, r24	; 11
    while(1)
    {
        ADCSRA |= (1 << ADSC); //start ADC conversion
  a4:	ea e7       	ldi	r30, 0x7A	; 122
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
		do 
		{

		} while (ADCSRA & (1<<ADSC));
  ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	86 fd       	sbrc	r24, 6
  b4:	fc cf       	rjmp	.-8      	; 0xae <main+0x2e>
		
		adcValue = ADC >> 2; //pomin dwa najmniej znaczace bity
  b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  be:	96 95       	lsr	r25
  c0:	87 95       	ror	r24
  c2:	96 95       	lsr	r25
  c4:	87 95       	ror	r24
		adcValue &= 0b11111100;
  c6:	8c 7f       	andi	r24, 0xFC	; 252
  c8:	99 27       	eor	r25, r25
		PORTD = adcValue;
  ca:	8b b9       	out	0x0b, r24	; 11
		//_delay_ms(50);
    }
  cc:	eb cf       	rjmp	.-42     	; 0xa4 <main+0x24>
