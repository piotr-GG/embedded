
PWM_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002a8  0000033c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000036b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008dc  00000000  00000000  0000039b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000656  00000000  00000000  00000c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f6  00000000  00000000  000012cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000058  00000000  00000000  000015c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000049  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000186d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000002a2  000002a2  00000336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.init_timer0 0000001c  00000286  00000286  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000060  00000226  00000226  000002ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_16 0000015e  000000c8  000000c8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.direction 00000001  00800102  00800102  0000033c  2**0
                  ALLOC
 17 .data.pwm     00000002  00800100  000002a6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
   8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
   c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  10:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  14:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  18:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  1c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  20:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  24:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  28:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  2c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  30:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  34:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  38:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  3c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_etext>
  44:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  48:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  4c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  50:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  54:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  58:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  5c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  60:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  64:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 02       	muls	r16, r17
  6c:	00 02       	muls	r16, r16
  6e:	a6 01       	movw	r20, r12
  70:	02 01       	movw	r0, r4
  72:	03 80       	ldd	r0, Z+3	; 0x03

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 13 01 	call	0x226	; 0x226 <main>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

000002a2 <__bad_interrupt>:
 2a2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init_timer0:

00000286 <init_timer0>:
static volatile uint8_t direction =UP;


void init_timer0()
{
	TCCR0A = (1 << WGM01); //tryb CTC (Clear Timer On Compare)
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	84 bd       	out	0x24, r24	; 36
	OCR0A = TIMER0_TOP;		//255 jako wartoœæ do której ma zliczaæ
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1<<TOIE0); //ustaw bit Timer/Counter0 Overflow interrupt enable
 28e:	ee e6       	ldi	r30, 0x6E	; 110
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	81 60       	ori	r24, 0x01	; 1
 296:	80 83       	st	Z, r24
	
	TCNT0 = 0; //inicjalizacja licznika
 298:	16 bc       	out	0x26, r1	; 38
	TCCR0B = (1<< CS02 ) | (1<<CS00); //prescaler 1/1024;
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	85 bd       	out	0x25, r24	; 37

	sei(); //enable global interrupts
 29e:	78 94       	sei
 2a0:	08 95       	ret

Disassembly of section .text.main:

00000226 <main>:


int main(void)
{
	
	DDRB = (1<<DDB1) | (1<<DDB2) | (1 << DDB3); //PB1 i PB2 jako output
 226:	8e e0       	ldi	r24, 0x0E	; 14
 228:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 22a:	15 b8       	out	0x05, r1	; 5
	
	ICR1 = 0xFFFF; //ustaw TOP na 16-bitów
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	9f ef       	ldi	r25, 0xFF	; 255
 230:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 234:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	OCR1A = 0x00FF; //ustaw PWM na 25% dla PB1
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 240:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0xBFFF; //ustaw PWM na 75% dla PB2
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	9f eb       	ldi	r25, 0xBF	; 191
 248:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 24c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	TCCR1A |= (1 << COM1A1) | (1<<COM1B1); //ustaw non-inverting mode
 250:	e0 e8       	ldi	r30, 0x80	; 128
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	80 6a       	ori	r24, 0xA0	; 160
 258:	80 83       	st	Z, r24
	
	TCCR1A |= (1<< WGM11);				   //ustaw FAST PWM u¿ywaj¹c ICR1 jako TOP (Mode 14)
 25a:	80 81       	ld	r24, Z
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13); //ustaw FAST PWM u¿ywaj¹c ICR1 jako TOP (Mode 14)
 260:	e1 e8       	ldi	r30, 0x81	; 129
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	88 61       	ori	r24, 0x18	; 24
 268:	80 83       	st	Z, r24
	TCCR1B |= (1<< CS10); //brak prescalera
 26a:	80 81       	ld	r24, Z
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	80 83       	st	Z, r24
	
	sei();
 270:	78 94       	sei
	
	
	init_timer0();
 272:	0e 94 43 01 	call	0x286	; 0x286 <init_timer0>

    while(1)
    {
		sleep_mode();
 276:	83 b7       	in	r24, 0x33	; 51
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	83 bf       	out	0x33, r24	; 51
 27c:	88 95       	sleep
 27e:	83 b7       	in	r24, 0x33	; 51
 280:	8e 7f       	andi	r24, 0xFE	; 254
 282:	83 bf       	out	0x33, r24	; 51
 284:	f8 cf       	rjmp	.-16     	; 0x276 <main+0x50>

Disassembly of section .text.__vector_16:

000000c8 <__vector_16>:
}

//procedura obs³ugi przerwania (Interrupt service routine)
//OVF_vect = Overflow vector
ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	switch (direction){
  d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <direction>
  da:	88 23       	and	r24, r24
  dc:	19 f0       	breq	.+6      	; 0xe4 <__vector_16+0x1c>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	89 f0       	breq	.+34     	; 0x104 <__vector_16+0x3c>
  e2:	1d c0       	rjmp	.+58     	; 0x11e <__vector_16+0x56>
		case UP:
			if(++pwm == TIMER0_TOP)
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	8f 3f       	cpi	r24, 0xFF	; 255
  f8:	91 05       	cpc	r25, r1
  fa:	89 f4       	brne	.+34     	; 0x11e <__vector_16+0x56>
				direction = DOWN;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direction>
 102:	0d c0       	rjmp	.+26     	; 0x11e <__vector_16+0x56>
			break;
		case DOWN:
			if(--pwm == 0)
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	89 2b       	or	r24, r25
 118:	11 f4       	brne	.+4      	; 0x11e <__vector_16+0x56>
				direction = UP;
 11a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <direction>
			break;
	}
	if(pwm >= 0 && pwm < 65){
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12e:	81 34       	cpi	r24, 0x41	; 65
 130:	91 05       	cpc	r25, r1
 132:	70 f4       	brcc	.+28     	; 0x150 <__vector_16+0x88>
		PORTB |= (1 << PORTB3);
 134:	85 b1       	in	r24, 0x05	; 5
 136:	88 60       	ori	r24, 0x08	; 8
 138:	85 b9       	out	0x05, r24	; 5
		//TCCR1B |= ((1 << CS12) | (1<<CS11) | (1<<CS10));
		ICR1 = 0x000F;
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 142:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
		OCR1B = 0x000F;
 146:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 14a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 14e:	64 c0       	rjmp	.+200    	; 0x218 <__vector_16+0x150>
	} else if (pwm >= 65 && pwm < 130){
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 158:	81 34       	cpi	r24, 0x41	; 65
 15a:	91 05       	cpc	r25, r1
 15c:	a8 f0       	brcs	.+42     	; 0x188 <__vector_16+0xc0>
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	82 38       	cpi	r24, 0x82	; 130
 168:	91 05       	cpc	r25, r1
 16a:	70 f4       	brcc	.+28     	; 0x188 <__vector_16+0xc0>
		PORTB &= ~(1 << PORTB3);
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	87 7f       	andi	r24, 0xF7	; 247
 170:	85 b9       	out	0x05, r24	; 5
		ICR1 = 0x00FF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 17a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
		OCR1B = 0x00FF;
 17e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 182:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 186:	48 c0       	rjmp	.+144    	; 0x218 <__vector_16+0x150>
		//TCCR1B &= ~((1 << CS12) | (1<<CS11) | (1<<CS10));
	} else if(pwm >= 130 && pwm < 195){
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 190:	82 38       	cpi	r24, 0x82	; 130
 192:	91 05       	cpc	r25, r1
 194:	a8 f0       	brcs	.+42     	; 0x1c0 <__vector_16+0xf8>
 196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19e:	83 3c       	cpi	r24, 0xC3	; 195
 1a0:	91 05       	cpc	r25, r1
 1a2:	70 f4       	brcc	.+28     	; 0x1c0 <__vector_16+0xf8>
		PORTB |= (1 << PORTB3);
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	88 60       	ori	r24, 0x08	; 8
 1a8:	85 b9       	out	0x05, r24	; 5
		ICR1 = 0x0FFF;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	9f e0       	ldi	r25, 0x0F	; 15
 1ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
		OCR1B = 0x0FFF;
 1b6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1ba:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1be:	2c c0       	rjmp	.+88     	; 0x218 <__vector_16+0x150>
		//TCCR1B |= ((1 << CS12) | (1<<CS11) | (1<<CS10));
	} else if(pwm >= 195 && pwm < 255){
 1c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c8:	83 3c       	cpi	r24, 0xC3	; 195
 1ca:	91 05       	cpc	r25, r1
 1cc:	a8 f0       	brcs	.+42     	; 0x1f8 <__vector_16+0x130>
 1ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d6:	8f 3f       	cpi	r24, 0xFF	; 255
 1d8:	91 05       	cpc	r25, r1
 1da:	70 f4       	brcc	.+28     	; 0x1f8 <__vector_16+0x130>
		PORTB &= ~(1 << PORTB3);
 1dc:	85 b1       	in	r24, 0x05	; 5
 1de:	87 7f       	andi	r24, 0xF7	; 247
 1e0:	85 b9       	out	0x05, r24	; 5
		ICR1 = 0xFFFF;
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	9f ef       	ldi	r25, 0xFF	; 255
 1e6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1ea:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
		OCR1B = 0xFFFF;
 1ee:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1f2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1f6:	10 c0       	rjmp	.+32     	; 0x218 <__vector_16+0x150>
		//TCCR1B &= ~((1 << CS12) | (1<<CS11) | (1<<CS10));
	} else if(pwm < 0 || pwm > 255){
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 200:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 204:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 208:	8f 3f       	cpi	r24, 0xFF	; 255
 20a:	91 05       	cpc	r25, r1
 20c:	29 f0       	breq	.+10     	; 0x218 <__vector_16+0x150>
 20e:	20 f0       	brcs	.+8      	; 0x218 <__vector_16+0x150>
		pwm = 0;
 210:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 214:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti
